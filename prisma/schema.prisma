datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String          @id @default(uuid()) // from Supabase auth
  name           String
  email          String          @unique
  phone          String?         // optional for profile
  avatarUrl      String?         // profile picture
  role           Role            @default(CUSTOMER)
  addresses      Address[]
  paymentMethods PaymentMethod[]
  carts          Cart[]
  orders         Order[]
  reviews        Review[]
  wishlists      Wishlist[]
  createdAt      DateTime        @default(now())
}

enum Role {
  CUSTOMER
  ADMIN
}

model Address {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  fullName   String
  street     String
  city       String
  state      String?
  postalCode String
  country    String
  phone      String?
  createdAt  DateTime @default(now())

  orders Order[] @relation("AddressOrders")
}

model PaymentMethod {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  type      String   // "card", "bank", "paypal", etc.
  provider  String?  // e.g. "Visa", "MasterCard", "BDO Bank"
  last4     String?  // last 4 digits of card for display
  createdAt DateTime @default(now())

  payments  Payment[]
}

model Category {
  id          Int       @id @default(autoincrement())
  type        CategoryType
  name        String    @unique
  description String?
  products    Product[]
}

enum CategoryType {
  FASHION
  ELECTRONICS
  HOME_LIVING
  BEAUTY_HEALTH
  SPORTS_OUTDOORS
}

model Product {
  id          Int             @id @default(autoincrement())
  name        String
  description String?
  price       Float
  currency    String          @default("USD")
  stock       Int             @default(0)
  category    Category        @relation(fields: [categoryId], references: [id])
  categoryId  Int
  imageUrl    String?
  reviews     Review[]
  cartItems   CartItem[]
  orderItems  OrderItem[]
  variants    ProductVariant[]
  media       ProductMedia[]
  wishlistItems WishlistItem[]
  createdAt   DateTime        @default(now())

  @@index([name])
  @@index([categoryId])
}


model ProductVariant {
  id          Int                 @id @default(autoincrement())
  product     Product             @relation(fields: [productId], references: [id])
  productId   Int
  sku         String              @unique
  price       Float?
  stock       Int                 @default(0)
  attributes  VariantAttribute[]
  createdAt   DateTime            @default(now())
}

model VariantAttribute {
  id          Int            @id @default(autoincrement())
  variant     ProductVariant @relation(fields: [variantId], references: [id])
  variantId   Int
  name        String         // e.g. "Color", "Size", "Storage"
  value       String         // e.g. "Red", "XL", "256GB"
}

model ProductMedia {
  id        Int      @id @default(autoincrement())
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  url       String
  type      String   // "image", "video"
  createdAt DateTime @default(now())
}

model Wishlist {
  id        Int           @id @default(autoincrement())
  user      User          @relation(fields: [userId], references: [id])
  userId    String
  items     WishlistItem[]
  createdAt DateTime      @default(now())
}

model WishlistItem {
  id         Int      @id @default(autoincrement())
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id])
  wishlistId Int
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int
  addedAt    DateTime @default(now())

  @@unique([wishlistId, productId]) // prevent duplicates
}

model Cart {
  id        Int        @id @default(autoincrement())
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  items     CartItem[]
  createdAt DateTime   @default(now())
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  createdAt DateTime @default(now())
}

model Order {
  id        Int           @id @default(autoincrement())
  user      User          @relation(fields: [userId], references: [id])
  userId    String
  address   Address?      @relation(fields: [addressId], references: [id], name: "AddressOrders")
  addressId Int?
  total     Float         @default(0)
  status    OrderStatus   @default(PENDING)
  items     OrderItem[]
  coupons   OrderCoupon[]
  payments  Payment[]
  shipment  Shipment?
  createdAt DateTime      @default(now())

  @@index([userId])
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  price     Float
}

model Payment {
  id              Int            @id @default(autoincrement())
  order           Order          @relation(fields: [orderId], references: [id])
  orderId         Int
  paymentMethod   PaymentMethod? @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId Int?
  amount          Float
  status          PaymentStatus  @default(PENDING)
  transactionId   String?
  createdAt       DateTime       @default(now())
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

model Review {
  id        Int      @id @default(autoincrement())
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())

  @@index([productId])
  @@index([userId])
}

model Coupon {
  id              Int           @id @default(autoincrement())
  code            String        @unique
  discountPercent Int
  validUntil      DateTime?
  createdAt       DateTime      @default(now())
  orderCoupons    OrderCoupon[]
}

model OrderCoupon {
  id       Int    @id @default(autoincrement())
  order    Order  @relation(fields: [orderId], references: [id])
  orderId  Int
  coupon   Coupon @relation(fields: [couponId], references: [id])
  couponId Int
}

model Shipment {
  id          Int            @id @default(autoincrement())
  order       Order          @relation(fields: [orderId], references: [id])
  orderId     Int @unique
  carrier     String         // e.g. "DHL", "FedEx", "UPS"
  trackingId  String?
  status      ShipmentStatus @default(PROCESSING)
  shippedAt   DateTime?
  deliveredAt DateTime?
}

enum ShipmentStatus {
  PROCESSING
  IN_TRANSIT
  DELIVERED
}
