datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String          @id @default(uuid())
  name           String
  email          String          @unique
  phone          String?
  avatarUrl      String?
  role           Role            @default(CUSTOMER)
  addresses      Address[]
  paymentMethods PaymentMethod[]
  carts          Cart[]
  orders         Order[]
  reviews        Review[]
  wishlists      Wishlist[]
  createdAt      DateTime        @default(now())

  @@index([email])
}

enum Role {
  CUSTOMER
  ADMIN
}

model Address {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  fullName   String
  street     String
  city       String
  state      String?
  postalCode String
  country    String
  phone      String?
  createdAt  DateTime @default(now())

  orders Order[] @relation("AddressOrders")

  @@index([userId])
}

model PaymentMethod {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  type      String
  provider  String?
  last4     String?
  createdAt DateTime @default(now())

  payments  Payment[]

  @@index([userId])
}

model Category {
  id          Int      @id @default(autoincrement())
  type        CategoryType
  name        String   @unique
  description String?
  products    Product[]
}

enum CategoryType {
  FASHION
  ELECTRONICS
  HOME_LIVING
  BEAUTY_HEALTH
  SPORTS_OUTDOORS
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  DELETED
}

model Product {
  id             Int             @id @default(autoincrement())
  name           String
  description    String?
  price          Float
  currency       String          @default("USD")
  stock          Int             @default(0)
  category       Category        @relation(fields: [categoryId], references: [id])
  categoryId     Int
  imageUrl       String?
  reviews        Review[]
  cartItems      CartItem[]
  orderItems     OrderItem[]
  variants       ProductVariant[]
  media          ProductMedia[]
  wishlistItems  WishlistItem[]
  createdAt      DateTime        @default(now())

  status         ProductStatus   @default(ACTIVE) 

  averageRating  Float?          @default(0)
  reviewCount    Int             @default(0)
}


model ProductVariant {
  id         Int      @id @default(autoincrement())
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int
  sku        String   @unique
  price      Float?
  stock      Int      @default(0)
  attributes Json
  createdAt  DateTime @default(now())
  CartItem   CartItem[]

  @@index([productId])
}

model ProductMedia {
  id        Int      @id @default(autoincrement())
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  url       String
  type      String
  createdAt DateTime @default(now())

  @@index([productId])
}

model Wishlist {
  id        Int           @id @default(autoincrement())
  user      User          @relation(fields: [userId], references: [id])
  userId    String
  items     WishlistItem[]
  createdAt DateTime      @default(now())

  @@index([userId])
}

model WishlistItem {
  id         Int      @id @default(autoincrement())
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id])
  wishlistId Int
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int
  addedAt    DateTime @default(now())

  @@unique([wishlistId, productId])
  @@index([productId])
}

model Cart {
  id          Int        @id @default(autoincrement())
  user        User       @relation(fields: [userId], references: [id])
  userId      String     @unique
  items       CartItem[]
  createdAt   DateTime   @default(now())

  // Denormalized totals for instant cart summaries
  totalItems  Int        @default(0)
  totalAmount Float      @default(0)

  @@index([userId])
}

model CartItem {
  id               Int      @id @default(autoincrement())
  cartId           Int
  productId        Int
  variantId        Int?
  quantity         Int
  createdAt        DateTime @default(now())

  cart             Cart            @relation(fields: [cartId], references: [id])
  product          Product         @relation(fields: [productId], references: [id])
  variant          ProductVariant? @relation(fields: [variantId], references: [id])

  // required snapshots
  productName       String
  productImageUrl   String?
  unitPrice         Float
  currency          String     @default("USD")
  variantSku        String?
  variantAttributes Json?

  @@unique([cartId, productId, variantId])
  @@index([cartId, createdAt])
}

model Order {
  id        Int           @id @default(autoincrement())
  user      User          @relation(fields: [userId], references: [id])
  userId    String
  address   Address?      @relation(fields: [addressId], references: [id], name: "AddressOrders")
  addressId Int?
  total     Float         @default(0)
  status    OrderStatus   @default(PENDING)
  items     OrderItem[]
  coupons   OrderCoupon[]
  payments  Payment[]
  shipments Shipment[]   
  createdAt DateTime      @default(now())

  @@index([userId])
  @@index([createdAt])
  @@index([status])
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  variantId Int?
  quantity  Int
  price     Float

  @@index([orderId])
  @@index([productId])
}

model Payment {
  id              Int            @id @default(autoincrement())
  order           Order          @relation(fields: [orderId], references: [id])
  orderId         Int
  paymentMethod   PaymentMethod? @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId Int?
  amount          Float
  status          PaymentStatus  @default(PENDING)
  transactionId   String?
  createdAt       DateTime       @default(now())

  @@index([orderId])
  @@index([status])
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

model Review {
  id        Int      @id @default(autoincrement())
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())

  @@index([productId, createdAt]) // latest reviews fast
  @@index([userId])
}

model Coupon {
  id              Int           @id @default(autoincrement())
  code            String        @unique
  discountPercent Int
  validUntil      DateTime?
  createdAt       DateTime      @default(now())
  orderCoupons    OrderCoupon[]
}

model OrderCoupon {
  id       Int    @id @default(autoincrement())
  order    Order  @relation(fields: [orderId], references: [id])
  orderId  Int
  coupon   Coupon @relation(fields: [couponId], references: [id])
  couponId Int

  @@index([orderId, couponId])
}

model Shipment {
  id          Int            @id @default(autoincrement())
  order       Order          @relation(fields: [orderId], references: [id])
  orderId     Int
  carrier     String
  trackingId  String?
  status      ShipmentStatus @default(PROCESSING)
  shippedAt   DateTime?
  deliveredAt DateTime?

  @@index([orderId])
}

enum ShipmentStatus {
  PROCESSING
  IN_TRANSIT
  DELIVERED
}
